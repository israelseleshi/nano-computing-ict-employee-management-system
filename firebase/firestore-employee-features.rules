
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isManager() {
      return isAuthenticated() && request.auth.token.role == 'manager';
    }
    
    function isEmployee() {
      return isAuthenticated() && request.auth.token.role == 'employee';
    }
    
    function isOwner(employeeId) {
      return isAuthenticated() && request.auth.uid == employeeId;
    }
    
    function isManagerOrOwner(employeeId) {
      return isManager() || isOwner(employeeId);
    }

    // Existing collections (keeping previous rules)
    match /users/{userId} {
      allow read, write: if isAuthenticated() && request.auth.uid == userId;
    }
    
    match /employees/{employeeId} {
      allow read: if isAuthenticated();
      allow write: if isManager() || isOwner(employeeId);
    }
    
    match /departments/{deptId} {
      allow read: if isAuthenticated();
      allow write: if isManager();
    }
    
    match /workTickets/{ticketId} {
      allow read: if isAuthenticated();
      allow write: if isManagerOrOwner(resource.data.employeeId);
    }
    
    match /timeEntries/{entryId} {
      allow read: if isAuthenticated();
      allow write: if isManagerOrOwner(resource.data.employeeId);
    }
    
    match /payrollEntries/{payrollId} {
      allow read, write: if isManager();
    }
    
    match /notifications/{notificationId} {
      allow read: if isAuthenticated() && 
        (isManager() || request.auth.uid in resource.data.recipients);
      allow write: if isManager();
    }
    
    match /goals/{goalId} {
      allow read: if isAuthenticated();
      allow write: if isManagerOrOwner(resource.data.employeeId);
    }
    
    match /reports/{reportId} {
      allow read, write: if isManager();
    }
    
    match /settings/{settingId} {
      allow read, write: if isManager();
    }

    // NEW RULES FOR EMPLOYEE FEATURES
    
    // Employee profiles - employees can read/write their own, managers can read all
    match /employeeProfiles/{profileId} {
      allow read: if isAuthenticated() && 
        (isManager() || request.auth.uid == resource.data.employeeId);
      allow write: if isAuthenticated() && 
        (isManager() || request.auth.uid == resource.data.employeeId);
    }
    
    // Leave requests - employees can create their own, managers can approve/reject
    match /leaveRequests/{leaveId} {
      allow read: if isAuthenticated() && 
        (isManager() || request.auth.uid == resource.data.employeeId);
      allow create: if isEmployee() && request.auth.uid == request.resource.data.employeeId;
      allow update: if isManager() || 
        (isOwner(resource.data.employeeId) && resource.data.status == 'pending');
    }
    
    // Leave balances - employees can read their own, managers can read/write all
    match /leaveBalances/{balanceId} {
      allow read: if isAuthenticated() && 
        (isManager() || request.auth.uid == resource.data.employeeId);
      allow write: if isManager();
    }
    
    // Profile change logs - audit trail, employees can read their own, managers can read all
    match /profileChangeLogs/{logId} {
      allow read: if isAuthenticated() && 
        (isManager() || request.auth.uid == resource.data.employeeId);
      allow create: if isAuthenticated() && request.auth.uid == request.resource.data.changedBy;
    }
  }
}

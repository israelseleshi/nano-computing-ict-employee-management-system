
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isManager() {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'manager';
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isManagerOrOwner(employeeId) {
      return isManager() || isOwner(employeeId);
    }

    // Users collection - consolidated with profiles and leave balances
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isOwner(userId) || isManager();
      allow delete: if isManager();
    }
    
    // Employees collection
    match /employees/{employeeId} {
      allow read, write, delete: if true; // Allow cleanup operations
    }
    
    // Departments collection
    match /departments/{deptId} {
      allow read, write, delete: if true; // Allow cleanup operations
    }
    
    // Work tickets collection
    match /workTickets/{ticketId} {
      allow read: if isAuthenticated();
      allow create: if isManager();
      allow update: if isManager();
      allow delete: if isManager();
    }
    
    // Time entries
    match /timeEntries/{entryId} {
      allow read: if isAuthenticated();
      allow write: if isManagerOrOwner(resource.data.employeeId);
    }
    
    // Payroll entries collection
    match /payrollEntries/{entryId} {
      allow read: if isOwner(resource.data.employee_id) || isManager();
      allow create: if isManager();
      allow update: if isManager();
      allow delete: if isManager();
    }
    
    // Notifications
    match /notifications/{notificationId} {
      allow read: if isAuthenticated() && 
        (isManager() || request.auth.uid in resource.data.recipients);
      allow write: if isManager();
    }
    
    // Goals
    match /goals/{goalId} {
      allow read: if isAuthenticated();
      allow write: if isManagerOrOwner(resource.data.employeeId);
    }
    
    // Leave requests collection - consolidated
    match /leaveRequests/{requestId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isManager();
      allow delete: if isManager();
    }
    
    // Performance metrics
    match /performanceMetrics/{perfId} {
      allow read, write, delete: if true; // Allow cleanup operations
    }
    
    // Messages
    match /messages/{messageId} {
      allow read, write, delete: if true; // Allow cleanup operations
    }
    
    // Courses - all can read, managers can write
    match /courses/{courseId} {
      allow read, write, delete: if true; // Allow cleanup operations
    }
    
    // Documents
    match /documents/{docId} {
      allow read, write, delete: if true; // Allow cleanup operations
    }
    
    // Team members
    match /teamMembers/{memberId} {
      allow read, write, delete: if true; // Allow cleanup operations
    }
    
    // Achievements
    match /achievements/{achievementId} {
      allow read, write, delete: if true; // Allow cleanup operations
    }
    
    // Reports - managers only
    match /reports/{reportId} {
      allow read, write, delete: if true; // Allow cleanup operations
    }
    
    // Settings - managers only
    match /settings/{settingId} {
      allow read, write: if isManager();
    }
    
    // Additional collections that need cleanup permissions
    match /expenses/{expenseId} {
      allow read, write, delete: if true; // Allow cleanup operations
    }
    
    match /learningProgress/{progressId} {
      allow read, write, delete: if true; // Allow cleanup operations
    }
    
    match /dates/{dateId} {
      allow read, write, delete: if true; // Allow cleanup operations
    }
    
    match /leaveSettings/{settingId} {
      allow read, write, delete: if true; // Allow cleanup operations
    }
    
    match /employeeLeaveBalances/{balanceId} {
      allow read, write, delete: if true; // Allow cleanup operations
    }
  }
}
